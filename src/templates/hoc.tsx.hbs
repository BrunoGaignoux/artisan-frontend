import React, { ReactElement, useCallback, useState } from 'react';
import { With{{> name }}Type } from '{{> typePath }}';

const with{{> name }} = (
  Component: new () => React.Component,
  openAction: string,
): ((props: With{{> name }}Type) => ReactElement) => {
  // eslint-disable-next-line react/display-name
  return (props: With{{> name }}Type): ReactElement => {
    const [open, setOpen] = useState(false);

    const onTargetProp = useCallback(
      (e: any) => {
        setOpen(!open);
        props?.onChange(e);
      },
      [props],
    );

    const onModalClose = useCallback(() => {
      setOpen(false);
      document.documentElement.style.overflowY = 'auto';
      document.body.classList.remove('no-scroll');
    }, []);

    return (
      <>
        {open && (
          < {{> name }}
            isOpen={open}
            onClose={onModalClose}
          />
        )}
        <Component {...props} {...{ [openAction]: onTargetProp }} />
      </>
    );
  };
};

export { with{{> name }} };
